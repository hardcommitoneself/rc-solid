import { ParentComponent, createContext, createEffect, createResource, useContext, createSignal, onMount } from 'solid-js';
import { Meta, Title } from 'solid-meta';
import { useLocation } from 'solid-app-router';
import { createI18nContext, I18nContext } from '@solid-primitives/i18n';

interface AppContextInterface {
  loading: boolean;
  sidebar: boolean;
}

const AppContext = createContext<AppContextInterface>({
  loading: true,
  sidebar: false
});

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const langs: { [lang: string]: () => Promise<any> } = {
  en: async () => (await import('../lang/en/en')).default(),
};

// Some browsers does not map correctly to some locale code
// due to offering multiple locale code for similar language (e.g. tl and fil)
// This object maps it to correct `langs` key
const langAliases: Record<string, string> = {
  fil: 'tl',
};

type DataParams = {
  locale: string;
};

export const AppContextProvider: ParentComponent = (props) => {
  const browserLang = navigator.language.slice(0, 2);
  const location = useLocation();

  const i18n = createI18nContext({}, ('en') as string);
  const [t, { add, locale }] = i18n;
  const params = (): DataParams => {
    const locale = i18n[1].locale();

    if (locale in langAliases) {
      return { locale: langAliases[locale] };
    }

    return { locale };
  };

  const [lang] = createResource(params, ({ locale }) => langs[locale]());

  createEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (!lang.loading) add(i18n[1].locale(), lang() as Record<string, any>);
  });

  createEffect(() => {
    document.documentElement.lang = locale();
  });

  const [sidebar, setSidebar] = createSignal<boolean>(false);

  onMount(() => {
      setTimeout(() => {
        setSidebar(true);
      }, 5000)
  })

  const store = {
    get loading() {
      return lang.loading;
    },
    get sidebar() {
        return sidebar();
    },
    set sidebar(value) {
        console.log(value)
        setSidebar(value);
    }
  };

  return (
    <AppContext.Provider value={store}>
      <I18nContext.Provider value={i18n}>
        <Title>fdgdfg</Title>
        <Meta name="lang" content={locale()} />
        {props.children}
      </I18nContext.Provider>
    </AppContext.Provider>
  );
};

export const useAppContext = () => useContext(AppContext);